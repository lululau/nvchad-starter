local map = vim.keymap.set

map("n", "<leader>odA", function() require("yazi").yazi(nil, "/Applications") end, { desc = "Open applications directory" })
map("n", "<leader>odb", function() require("yazi").yazi(nil, "~/blog") end, { desc = "Open blog directory" })
map("n", "<leader>odB", function() require("yazi").yazi(nil, "~/bin") end, { desc = "Open bin directory" })
map("n", "<leader>odC", function() require("yazi").yazi(nil, "~/Cafe") end, { desc = "Open cafe directory" })
map("n", "<leader>odc", function() require("yazi").yazi(nil, "~/.config") end, { desc = "Open config directory" })
map("n", "<leader>od<C-c>", function() require("yazi").yazi(nil, "~/cascode") end, { desc = "Open cascode directory" })
map("n", "<leader>odd", function() require("yazi").yazi(nil, "~/Downloads") end, { desc = "Open downloads directory" })
map("n", "<leader>odD", function() require("yazi").yazi(nil, "~/Documents") end, { desc = "Open documents directory" })
map("n", "<leader>odf", function() require("yazi").yazi(nil, "~/.fzf") end, { desc = "Open fzf directory" })
map("n", "<leader>odg", function() require("yazi").yazi(nil, "~/cascode/github.com") end, { desc = "Open github directory" })
map("n", "<leader>odH", function() require("yazi").yazi(nil, "/home") end, { desc = "Open home directory" })
map("n", "<leader>odh", function() require("yazi").yazi(nil, "~/") end, { desc = "Open user directory" })
map("n", "<leader>odi", function() require("yazi").yazi(nil, "~/Library/Mobile Documents/com~apple~CloudDocs") end, { desc = "Open icloud directory" })
map("n", "<leader>odk", function() require("yazi").yazi(nil, "~/sd") end, { desc = "Open kt directory" })
map("n", "<leader>odK", function() require("yazi").yazi(nil, "~/kt") end, { desc = "Open kt directory" })
map("n", "<leader>odl", function() require("yazi").yazi(nil, "~/Library/Application Support") end, { desc = "Open las directory" })
map("n", "<leader>odL", function() require("yazi").yazi(nil, "~/Library/Preferences") end, { desc = "Open lp directory" })
map("n", "<leader>odM", function() require("yazi").yazi(nil, "~/Movies") end, { desc = "Open movies directory" })
map("n", "<leader>odm", function() require("yazi").yazi(nil, "~/Documents/materials") end, { desc = "Open materials directory" })
map("n", "<leader>ods", function() require("yazi").yazi(nil, "~/Documents/materials/scratches") end, { desc = "Open scratch directory" })
map("n", "<leader>odS", function() require("yazi").yazi(nil, "~/snips") end, { desc = "Open snips directory" })
map("n", "<leader>od<C-s>", function() require("yazi").yazi(nil, "~/Documents/materials/snippets") end, { desc = "Open snippets directory" })
map("n", "<leader>ode", function() require("yazi").yazi(nil, "~/.emacs.spacemacs.d") end, { desc = "Open emacs directory" })
map("n", "<leader>odz", function() require("yazi").yazi(nil, "~/.spacezsh") end, { desc = "Open spacezsh directory" })
map("n", "<leader>odZ", function() require("yazi").yazi(nil, "~/.oh-my-zsh") end, { desc = "Open ohmyzsh directory" })
map("n", "<leader>od/", function() require("yazi").yazi(nil, "/") end, { desc = "Open root directory" })
map("n", "<leader>odo", function() require("yazi").yazi(nil, "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org") end, { desc = "Open org directory" })
map("n", "<leader>odj", function() require("yazi").yazi(nil, "~/Documents/materials/journal") end, { desc = "Open journal directory" })
map("n", "<leader>odJ", function() require("yazi").yazi(nil, "~/Documents/materials/jira") end, { desc = "Open jira directory" })
map("n", "<leader>odn", function() require("yazi").yazi(nil, "~/Documents/materials/notes") end, { desc = "Open notes directory" })
map("n", "<leader>odN", function() require("yazi").yazi(nil, "~/Documents/evernotes") end, { desc = "Open evernotes directory" })
map("n", "<leader>odw", function() require("yazi").yazi(nil, "~/Documents/materials/webclips") end, { desc = "Open webclips directory" })
map("n", "<leader>odv", function() require("yazi").yazi(nil, "/Volumes") end, { desc = "Open volumes directory" })
map("n", "<leader>odT", function() require("yazi").yazi(nil, "~/.tmux") end, { desc = "Open tmux directory" })
map("n", "<leader>odt", function() require("yazi").yazi(nil, "~/tmp") end, { desc = "Open tmp directory" })
map("n", "<leader>och", ":edit " .. "/etc/hosts<CR>", { desc = "Open hosts config" })
map("n", "<leader>ocS", ":edit " .. "/etc/sudoers<CR>", { desc = "Open sudoers config" })
map("n", "<leader>ocz", ":edit " .. "~/.zshrc<CR>", { desc = "Open zshrc config" })
map("n", "<leader>ocp", ":edit " .. "~/.pryrc<CR>", { desc = "Open pryrc config" })
map("n", "<leader>ocl", ":edit " .. "~/.vrl.yml<CR>", { desc = "Open vrl config" })
map("n", "<leader>ocg", ":edit " .. "~/.gitconfig<CR>", { desc = "Open git config" })
map("n", "<leader>ocd", ":edit " .. "~/.docker<CR>", { desc = "Open docker config" })
map("n", "<leader>ocs", ":edit " .. "~/.ssh/config<CR>", { desc = "Open ssh config" })
map("n", "<leader>ocA", ":edit " .. "~/.ssh/authorized_keys<CR>", { desc = "Open authorized_keys config" })
map("n", "<leader>oca", ":edit " .. "/etc/ansible<CR>", { desc = "Open ansible config" })
map("n", "<leader>oct", ":edit " .. "~/.tmux.conf<CR>", { desc = "Open tmux config" })
map("n", "<leader>ocJ", ":edit " .. "~/.jenkins-builder.yaml<CR>", { desc = "Open jenkins-builder config" })
map("n", "<leader>ocj", ":edit " .. "~/.ideavimrc<CR>", { desc = "Open ideavimrc config" })
map("n", "<leader>ocn", ":edit " .. "/usr/local/etc/nginx<CR>", { desc = "Open nginx config" })
map("n", "<leader>ock", ":edit " .. "~/.kube/config<CR>", { desc = "Open kubectl config" })
map("n", "<leader>ocK", ":edit " .. "~/.k9s<CR>", { desc = "Open k9s config" })
map("n", "<leader>oc9", ":edit " .. "~/.k9s<CR>", { desc = "Open k9s2 config" })
map("n", "<leader>ocq", ":edit " .. "~/.arql.d<CR>", { desc = "Open arql config" })
map("n", "<leader>ocm", ":edit " .. "~/.m2/settings.xml<CR>", { desc = "Open maven config" })
map("n", "<leader>ocv", ":edit " .. "~/.vimrc<CR>", { desc = "Open vimrc config" })
map("n", "<leader>oea", ":edit " .. "~/Documents/materials/demo/demo.art<CR>", { desc = "Open artist-demo" })
map("n", "<leader>oeb", ":edit " .. "~/Documents/materials/demo/big.txt<CR>", { desc = "Open bigtxt-demo" })
map("n", "<leader>oeh", ":edit " .. "~/Documents/materials/demo/demo-http.org<CR>", { desc = "Open http-demo" })
map("n", "<leader>oel", ":edit " .. "~/Documents/materials/demo/demo.el<CR>", { desc = "Open elisp-demo" })
map("n", "<leader>oer", ":edit " .. "~/Documents/materials/demo/demo.rb<CR>", { desc = "Open ruby-demo" })
map("n", "<leader>oeP", ":edit " .. "~/Documents/materials/demo/demo.py<CR>", { desc = "Open python-demo" })
map("n", "<leader>oeJ", ":edit " .. "~/cascode/java/maven/simple/src/main/java/org/sonatype/mavenbook/App.java<CR>", { desc = "Open java-demo" })
map("n", "<leader>oej", ":edit " .. "~/Documents/materials/demo/demo.js<CR>", { desc = "Open js-demo" })
map("n", "<leader>oes", ":edit " .. "~/Documents/materials/demo/demo.sh<CR>", { desc = "Open shell-demo" })
map("n", "<leader>oeS", ":edit " .. "~/Documents/materials/demo/demo.swift<CR>", { desc = "Open swift-demo" })
map("n", "<leader>oep", ":edit " .. "~/Documents/materials/demo/demo.pl<CR>", { desc = "Open perl-demo" })
map("n", "<leader>oeo", ":edit " .. "~/Documents/materials/demo/demo.org<CR>", { desc = "Open org-demo" })
map("n", "<leader>oem", ":edit " .. "~/Documents/materials/demo/demo.md<CR>", { desc = "Open markdown-demo" })
map("n", "<leader>oeC", ":edit " .. "~/Documents/materials/demo/clojure/demo/src/demo/demo.clj<CR>", { desc = "Open coffee-demo" })
map("n", "<leader>oey", ":edit " .. "~/Documents/materials/demo/demo.yaml<CR>", { desc = "Open yaml-demo" })
map("n", "<leader>oeH", ":edit " .. "~/Documents/materials/demo/demo.html<CR>", { desc = "Open html-demo" })
map("n", "<leader>oec", ":edit " .. "~/Documents/materials/demo/demo.c<CR>", { desc = "Open c-demo" })
map("n", "<leader>oeg", ":edit " .. "~/cascode/go/src/demo/demo.go<CR>", { desc = "Open go-demo" })
map("n", "<leader>oeq", ":edit " .. "~/Documents/materials/demo/demo.sql<CR>", { desc = "Open sql-demo" })
map("n", "<leader>oeE", ":edit " .. "~/Documents/materials/demo/demo.exs<CR>", { desc = "Open elixir-demo" })
map("n", "<leader>oee", ":edit " .. "~/Documents/materials/demo/demo.es<CR>", { desc = "Open es-demo" })
map("n", "<leader>oek", ":edit " .. "~/Documents/materials/demo/demo.hs<CR>", { desc = "Open haskell-demo" })
map("n", "<leader>oex", ":edit " .. "~/Documents/materials/mind-wave-chats/default.chat<CR>", { desc = "Open chat-demo" })
map("n", "<leader>oet", ":edit " .. "~/Documents/materials/demo/demo.txt<CR>", { desc = "Open txt-demo" })
map("n", "<leader>oob", ":edit " .. "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/bookmarks.org<CR>", { desc = "Open bookmarks-org" })
map("n", "<leader>ood", ":edit " .. "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/tech_diary.org<CR>", { desc = "Open tech-diary-org" })
map("n", "<leader>ooh", ":edit " .. "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/homebrews.org<CR>", { desc = "Open homebrews-org" })
map("n", "<leader>oop", ":edit " .. "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/projects.org<CR>", { desc = "Open projects-org" })
map("n", "<leader>ool", ":edit " .. "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/learnings.org<CR>", { desc = "Open learnings-org" })
map("n", "<leader>oof", ":edit " .. "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/life.org<CR>", { desc = "Open life-org" })
map("n", "<leader>ooc", ":edit " .. "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/capture.org<CR>", { desc = "Open capture-org" })
map("n", "<leader>ooC", ":edit " .. "~/Documents/materials/cheatsheets<CR>", { desc = "Open cheatsheet-org" })
map("n", "<leader>oot", ":edit " .. "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/team-tasks.org<CR>", { desc = "Open team-tasks-org" })
map("n", "<leader>ook", ":edit " .. "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/kbd-macros.org<CR>", { desc = "Open kbd-macros-org" })
map("n", "<leader>ooj", ":edit " .. "~/Documents/materials/jira/recent-issues.org<CR>", { desc = "Open jira-org" })
map("n", "<leader>oor", ":edit " .. "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/rails-guides-org/rails-guides-index.org<CR>", { desc = "Open rails-guides-org" })
